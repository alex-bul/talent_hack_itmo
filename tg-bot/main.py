import json
import requests
import re

from telebot import TeleBot

from telebot.types import BotCommand, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, \
    ReplyKeyboardMarkup, KeyboardButton

from ai_module.chatgpt import GPT_MODEL, ask_chat_gpt
from core.config import BOT_TOKEN
from db.methods import set_chat_mode, get_user

bot = TeleBot(token=BOT_TOKEN)

CHATGPT_CONTEXT = {}
CONTEXT_SIZE = 1000

SLOTS = {
    "–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–µ–≤–∏—á": [1, 0, 0, 0, 1, 1, 0, 0, 0],
    "–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–µ–≤–∏—á": [0, 1, 1, 0, 1, 1, 0, 0, 0],
    "–ï–≥–æ—Ä –ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–µ–≤–∏—á": [0, 0, 0, 0, 0, 0, 0, 0, 0],

}

calendar_keyboard = InlineKeyboardMarkup()
calendar_keyboard.add(InlineKeyboardButton("–°–ª–æ—Ç—ã", callback_data='slots'))
calendar_keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data='meetings'))

slots_keyboard = InlineKeyboardMarkup()
for name in SLOTS.keys():
    slots_keyboard.add(InlineKeyboardButton(text=name, callback_data="select_slot_" + name))
slots_keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_calendar"))


def get_person_slot_keyboard(person):
    keyboard = InlineKeyboardMarkup()
    row = []
    for i in range(9, 18):
        if SLOTS[person][i - 9] == 0:
            row.append(InlineKeyboardButton(text=f"{i}:00-{i + 1}:00", callback_data=f'slot_{person}+{i}:{i + 1}'))
        if len(row) == 3 or (i == 17 and row):
            keyboard.add(*row)
            row.clear()
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_slots_{name}"))
    return keyboard


meeting_keyboard = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
meeting_keyboard.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

MEETING_PIPELINE_HINTS = [
    ["–ö–æ–≥–¥–∞? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ú–ú.–ß–ß (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.09.23 11.00)", 'datetime'],
    ["–ö–æ–≥–æ –ø–æ–∑–æ–≤–µ–º? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å—Ç–æ–ª–±–∏–∫ email-—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∏", 'email'],
    ["–ß—Ç–æ –±—É–¥–µ—Ç? –£–∫–∞–∂–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å—Ç—Ä–µ—á–∏", 'title'],
    ["–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º, "
     "–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ **—Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è**!", 'description'],
]


def meeting_data_getter(message: Message, step_index=0, context=None):
    if context is None:
        context = {}

    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id,
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=calendar_keyboard)
        return

    if step_index > 0:
        text = message.text
        previous_key = MEETING_PIPELINE_HINTS[step_index - 1][1]
        if previous_key == 'datetime' and not bool(re.match(r"\d{2}\.\d{2}\.\d{2} \d{2}\.\d{2}", text)):
            message = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", parse_mode='markdown',
                                       reply_markup=meeting_keyboard)
            bot.register_next_step_handler(message, meeting_data_getter, step_index, context)
            return
        elif previous_key == 'email' and '@' not in text:
            message = bot.send_message(message.chat.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ **email-—ã** –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", parse_mode='markdown',
                                       reply_markup=meeting_keyboard)
            bot.register_next_step_handler(message, meeting_data_getter, step_index, context)
            return
        elif previous_key == 'description' and 'http' not in text:
            message = bot.send_message(message.chat.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ **—Å—Å—ã–ª–∫—É** –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!", parse_mode='markdown',
                                       reply_markup=meeting_keyboard)
            bot.register_next_step_handler(message, meeting_data_getter, step_index, context)
            return
        context[MEETING_PIPELINE_HINTS[step_index - 1][1]] = text

    if step_index < len(MEETING_PIPELINE_HINTS):
        message = bot.send_message(message.chat.id, MEETING_PIPELINE_HINTS[step_index][0], parse_mode='markdown',
                                   reply_markup=meeting_keyboard)
        bot.register_next_step_handler(message, meeting_data_getter, step_index + 1, context)
    else:
        bot.send_message(message.chat.id,
                         f"**–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ!**\n\nüî∏" + '\nüî∏'.join(context.values()),
                         parse_mode='markdown')


bot.set_my_commands([
    BotCommand('/wiki', '–ü–æ–∏—Å–∫ –ø–æ –≤–∏–∫–∏'),
    BotCommand('/chatgpt', '–û–±—â–µ–Ω–∏–µ —Å ChatGPT'),
    BotCommand('/calendar', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º'),
    BotCommand('/help', '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
])


def context_size_change(user_telegram_id):
    res = []
    size = 0
    for i, mes in enumerate(CHATGPT_CONTEXT[user_telegram_id][::-1]):
        res.append(mes)
        size += len(mes)
        if size >= CONTEXT_SIZE:
            break
    CHATGPT_CONTEXT[user_telegram_id] = res[::-1].copy()
    return res[::-1]


def handle_wiki(message: Message):
    user_telegram_id = message.from_user.id
    bot.send_chat_action(user_telegram_id, action='typing', timeout=100)
    text = message.text
    if user_telegram_id not in CHATGPT_CONTEXT:
        CHATGPT_CONTEXT[user_telegram_id] = []
    CHATGPT_CONTEXT[user_telegram_id].append(text)
    try:
        url = "http://backend:8000/query"

        payload = json.dumps({
            "message": text,
            "use_gpt": True,
            "context": context_size_change(user_telegram_id),
            "clarify": True
        })
        headers = {
            'Content-Type': 'application/json'
        }

        response = requests.request("POST", url, headers=headers, data=payload).json()

        answer = response['message']
        source = response['source']
        if answer:
            bot.send_message(user_telegram_id, answer + f"\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            CHATGPT_CONTEXT[user_telegram_id].append(answer)
        else:
            bot.send_message(user_telegram_id,
                             "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ó–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."
                             "\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–º—É –∏–∑ –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: "
                             "@alexbul0 –∏–ª–∏ @S_Statsenko")
    except Exception as ex:
        print(ex)
        bot.send_message(user_telegram_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑")


def handle_chatgpt(message: Message):
    user_telegram_id = message.from_user.id
    bot.send_chat_action(user_telegram_id, action='typing', timeout=100)
    bot.send_message(user_telegram_id, ask_chat_gpt(text=message.text))


def handle_calendar(message: Message):
    user_telegram_id = message.from_user.id
    bot.send_message(user_telegram_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=calendar_keyboard)


mods_info = {
    'wiki': ("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ üôÉ", handle_wiki),
    'chatgpt': (f"ChatGPT ({GPT_MODEL}) –Ω–∞ —Å–≤—è–∑–∏, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üëá", handle_chatgpt),
    'calendar': ('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é', handle_calendar)
}


@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚ú®\n\n"
                                      "/wiki ‚Äî —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
                                      "/chatgpt ‚Äî –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å chatGPT\n"
                                      "/calendar ‚Äî –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n\n"
                                      "–õ—é–±—É—é –∫–æ–º–∞–Ω–¥—É –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –º–µ–Ω—é –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É")


@bot.message_handler(commands=['wiki', 'chatgpt', 'calendar'])
def handle_chat_mode_change(message: Message):
    user_telegram_id = message.from_user.id
    command = message.text.strip('/')

    for mode, (answer, handler) in mods_info.items():
        if command.startswith(mode):
            set_chat_mode(user_telegram_id, mode)
            if mode == 'wiki':
                CHATGPT_CONTEXT[user_telegram_id] = []
            if mode == 'calendar':
                bot.send_message(user_telegram_id, answer, reply_markup=calendar_keyboard)
                break
            bot.send_message(user_telegram_id, answer)
            break


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_telegram_id = message.from_user.id
    user = get_user(user_telegram_id)

    for mode, (answer, handler) in mods_info.items():
        if user.chat_mode == mode:
            handler(message)
            break


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call: CallbackQuery):
    if call.data == 'slots' or call.data.startswith('back_slots'):
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", call.message.chat.id,
                              call.message.message_id, reply_markup=slots_keyboard)
    elif call.data == 'meetings':
        bot.edit_message_text(f"–ù–∞–∂–º–∏—Ç–µ **–û—Ç–º–µ–Ω–∞**, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏", call.message.chat.id,
                              call.message.message_id, parse_mode='markdown')
        meeting_data_getter(call.message)
    elif call.data.startswith("select_slot"):
        person = call.data.split('_')[2]
        bot.edit_message_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {person}", call.message.chat.id, call.message.message_id,
                              reply_markup=get_person_slot_keyboard(person))
    elif call.data.startswith('back'):
        if 'calendar' in call.data:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é", call.message.chat.id,
                                  call.message.message_id, reply_markup=calendar_keyboard)
    elif call.data.startswith('slot_'):
        info = call.data.split('_')[1]
        person, time = info.split('+')
        start, end = time.split(':')
        bot.send_message(call.message.chat.id,
                         f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ ({person}, {start}-{end}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        SLOTS[person][int(start) - 9] = 1
        bot.edit_message_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {person}", call.message.chat.id, call.message.message_id,
                              reply_markup=get_person_slot_keyboard(person))


bot.polling(none_stop=True)
